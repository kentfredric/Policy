# NAME

Policy - Policies, Standards and Guidelines for CPAN Modules

# VERSION

version 0.001000

# ABOUT THIS NAMESPACE

`Policy` is a namespace dedicated to documenting the human level of how code should be written,
detailing current best practices and recommendations for scopes as narrow as individual authors,
or guidelines as broad as all of CPAN.

Existence of these policies are not necessarily gospel, but merely a canonicalization of human
knowledge in a more consumable form that doesn't require active discussion.

Members of a group may wish to force these standards on code they control, but there is nothing
stopping an individual seeing these standards, and adopting them as their own anyway.

In fact, encouraging the adoption of such standards, especially in regards to `Toolchain` and `P5P`
standards is highly encouraged.

# SUB NAMESPACES

At this time, there are three primary categories:

- [`Policy::Org`](https://metacpan.org/pod/Policy::Org) - Policies under the authority of specific organizations

    Examples:

        Policy::Org::P5P
        Policy::Org::Toolchain
        Policy::Org::ShadowCat
        Policy::Org::Debian

    **NOTE:** There may be special cases for very high priority organizations within the CPAN ecosystem
    such that the need for an `Org::` prefix is optional. Both `P5P` and `Toolchain` are prime candidates
    for a priority organization. However, the second of those two are unlikely to be classes as high priority
    enough to warrant that naming.

- [`Policy::Project`](https://metacpan.org/pod/Policy::Project) - Policies dictated by specific projects

    Examples:

        Policy::Project::Moose
        Policy::Project::DBIC

    Projects typically can be distinguished from Organizations in that: Projects tend to be narrow scoped
    to a very specific domain, whereas Organizations are broad having opinions that can apply to almost anything.

    Projects often gravitate around a particular namespace, such as the examples given, whereas organizations
    are likely to be dabbling in a plethora of seemingly unrelated concerns.

- [`Policy::Author`](https://metacpan.org/pod/Policy::Author) - Policies dictated by specific authors

    These entries should be strictly under the control of the named PAUSE identifier,
    and people injecting under other peoples PAUSE identifier will have PAUSE admins gladly
    taking control of things under that name that the individual did not authorize.

    Examples:

        Policy::Author::AUTARCH
        Policy::Author::KENTNL
        Policy::Author::RIBASUSHI

# AUTHORSHIP OF NAMESPACES

The exact recommended layout of any policy namespace, should in itself have a policy dictating it
at some stage. However, in the interim, my personal suggestion is as follows:

    Policy::<Category>::<Name>::<PolicyId>_<PolicyWordToken>

Where:

- **`<Category>`** is one of `Org|Project|Author`
- **`<Name>`** is your organizational identifier as discussed in [SUB NAMESPACES](#sub-namespaces)
- **`<PolicyId>`** is zero-padded 4-digit number such as `0001`
- **`<PolicyWordToken>`** is a simple word expression intended to give some sort of identification, for example: `SimpleVersions`

The purpose here of the `<PolicyId>_<PolicyWordToken>` is to enforce a simplified visual sort order
that makes it clear the order in which the policies were added, to make it obvious which policies were
added more recently.

The namespace itself **`Policy::<Category>::<Name>`** should serve as an index to the policies
beneath it, grouping policies together by topic, severity, importance, deprecation status, etc, each with a short
blurb describing what will be found within.

Granted, such indexes are not entirely required, given the existence of MetaCPAN and friends, which will generate
a measure of index from package name and abstract alone. But it may be desired to expand slightly beyond the
terse requirements of abstracts, as well as being able to group policies in multiple ways.

# AUTHORSHIP OF POLICIES

Each policy is intended to be a "Living document", which should aim to remain "Current" at all times.

Only if an entire document fails to make sense should the document itself be deprecated.

# AUTHOR

Kent Fredric <kentnl@cpan.org>

# COPYRIGHT AND LICENSE

This software is copyright (c) 2015 by Kent Fredric <kentfredric@gmail.com>.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
